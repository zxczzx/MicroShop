/*
 * This file is generated by jOOQ.
 */
package org.migatotech.generated.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.migatotech.generated.tables.Order;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OrderRecord extends UpdatableRecordImpl<OrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>test.order.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>test.order.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>test.order.timestamp</code>.
     */
    public void setTimestamp(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>test.order.timestamp</code>.
     */
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>test.order.subscription_plan_id</code>.
     */
    public void setSubscriptionPlanId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>test.order.subscription_plan_id</code>.
     */
    public Integer getSubscriptionPlanId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrderRecord
     */
    public OrderRecord() {
        super(Order.ORDER);
    }

    /**
     * Create a detached, initialised OrderRecord
     */
    public OrderRecord(Integer id, LocalDateTime timestamp, Integer subscriptionPlanId) {
        super(Order.ORDER);

        setId(id);
        setTimestamp(timestamp);
        setSubscriptionPlanId(subscriptionPlanId);
        resetChangedOnNotNull();
    }
}
